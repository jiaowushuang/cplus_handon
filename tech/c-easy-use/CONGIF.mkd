<big>（easy）编译</big>  
1. 设置变量来表示编译器flags  
2. 设置变量来表示需要链接的库。在编译时和运行时各需一个变量（包含静态库和动态链接库）  
3. 使用上述两种变量来关联编译过程  
为使用库（标准位置），需要告知编译器两件事：编译器（#include 程序文本），链接器（-l flag 编译命令）。其中，#include用于将头文件复制到代码文件中，即复制函数原型；由原型关联到库文件（二者在路径上是分来的），则是采用flag `-l库名` 。  
样例1：`gcc name.c -o name -lm -g -Wall -o3 -std=gnu11`   
1. -g :增加调试符号（gdb）  
2. -std=gnu11 :允许代码采用C11和POISX标准（+GNU 扩展）。或是在makefiles中设置变量`CC=c11`  
3. -o3 :表示优化水平为3。在调试时需要将其设置为-o0。或是在makefiles中设置变量`CFLAGS=-o3`  
4. -Wall :增加编译警告，同时需要理解为什么发生该警告（Internet），以及如何修改代码以保证0警告和错误。或是增加`-Werror`将警告视为错误对待  
样例2：`gcc -I/usr/local/include name.c -o name -L/usr/local/lib -llib_name`    
1. 在代码文本中插入`#include<lib_name>`  
2. 将该库安装于/usr/local/lib下，将头文件安装于/usr/local/include下  
3. -I ：增加头文件搜索路径；-L ：增加库文件搜索路径  
4. 顺序：如果 a.o 依赖于 b.o等，需要`gcc a.o -lb.o -lc.o ...`，一步步寻找缺失项，直至搜索到`-lc`为止   

**头文件和库文件的路径（问题常出现在非标准库）**  
`#include<标准库>，#include"非标准库：路径由编译命令决定"`  
库文件位置：  
1. 供应商（2/3无权修改）（一般包管理器）     
2. 管理者（3无权修改）  
3. 用户  
除标准库（编译器默认）外，编译器仍需要知道非标准库的位置：  
1. 将非库安装于标准库路径之下（一般包管理器）  
2. tools  
3. 设置shell/makefiles变量  







