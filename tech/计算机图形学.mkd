<big>计算机图形学</big>

一、综述  
  
计算机图像学与图像处理的区别：   

1. 计算机图像学 用于生成图形  
2. 图像处理 用于对图像进行修改或解释，例如改善图像质量、分析图像或为机器人应用识别图形  
3. 二者的应用领域和技术互有重叠   

二、计算机图形硬件  

三、计算机图形软件  
基本概念：  

OpenGL：创建实时3D图像的编程接口。  
1. OpenGL是一种底层渲染API。  
2. 通过载入三角形，使用变换、纹理、着色器、混合模式来组合出模型  
3. OpenGL与高层工具包之区别：底层控制（自定义）和标准化   
  
历史：阴极射线管（CRT）->2D->实时（非实时：预渲染）->3D.   
  
3D:宽度、高度、深度，2D + 透视（线段间的角度） = 3D，绝大多数3D计算机图像实际上是近似3D。  

1. 单凭透视本身足以创建3D的外观   
2. 以2D形式观察时（屏幕），3D的效果依然存在；原因在于透视缩短（由于光线照射产生的表面着色以及透视投影）、颜色的改变、纹理、光照、着色、各种不同的颜色强度  
  
渲染：将数学和图形数据转换为3D空间图像的操作。  
变换和投影：通过变换矩阵（旋转顶点），在顶点间绘制线段，便可以在2D的平面屏幕上创造3D错觉；再通过投影矩阵，将3D坐标转换为2D屏幕坐标，并在2D屏幕坐标下绘制实际的线段。   
1. 使用线段绘图称为线框渲染   
2. 使用实心三角形（多边形）渲染更为常见   
3. 二者都可以进行光栅化（填充）   
预渲染：设计模型和场景，使用光线追踪器或扫描渲染器来处理这些定义，产生高质量的3D图像。  
    
光栅化:实际绘制/（填充）每个顶点间的线段/（像素）。其中，隐藏表面消除可以使3D效果更加明显（隐藏固体几何体的背面能够加强3D错觉）。但是，使用纯色对几何图形进行填充效果不佳。   
   
着色：沿着表面（顶点之间）改变颜色，可以创建光线照射的效果（光照错觉）。而着色器则是在图形硬件（GPU）上执行的程序，绘制顶点和执行光栅化。   
着色器：实时计算机图形，使用可编程着色器。GPU-图形处理单元，是显卡上的可编程芯片。高度并行，可在线重新配置显卡的工作方式，以达到预想效果。着色器可以实现实时逼真性。   
   
纹理贴图：一幅贴到三角形（多边形）的图片。一个纹理可胜于千个三角形。   
   
混合：    
1. 混合可以将不同的颜色进行组合   
2. 混合可以创建反射效果（看似透明）   
   
总结：所谓的计算机图形、3D几何体，就是将顶点间（点）连接起来，对三角形（多边形）进行光栅化以使对象实体化；之后，变化、着色、纹理、混合可以使实体更为逼真。   
    
旁注一：  
1. 坐标系统：在3D中对物体进行描述（指定物体的位置和大小）前，需要参考帧对其进行测量和定位。在OpenGL创建一个用于绘图的窗口时（绘制点、线、形状前），必须指定坐标系统以及将绘图坐标（逻辑笛卡尔坐标）映射到（裁剪区域+视口）实际的物理屏幕（窗口）坐标。
2. 窗口是以像素为单位进行度量的  
3. 裁剪区域的宽度和高度很少与窗口的宽度和高度相匹配  
4. 视口是裁剪区域的客户区域（视口可以被定义为裁剪区域的两倍或是相等，即视口可以缩小或放大窗口内的图像；也可以通过将视口设置为大于窗口的客户区域，只显示裁剪区域的一部分）  
   
旁注二：   
1. 图元：是一维或二维别的实体或表面（点、线、多边形），将图元组合在一起可以创建3D物体   
2. 顶点：是空间中的一个位置（笛卡尔坐标坐标），将其连接可以形成图元   
3. 创建实体3D几何图形实际上是连线游戏而已  
   
旁注三：  
1. 2D->3D：增加深度分量  
2. 3D->2D：投影（在逻辑上可以使用笛卡尔坐标表示3D空间的位置，但是屏幕上的像素实际上是二维的）   
   
投影方式：实际上是三角法和简单的矩阵操作，通过指定窗口中显示的视景体和变换。在投影中，可以指定远、近、左、右、顶、底等裁剪平面来作为视景体。  
1. 正投影：需要指定一个正方形或长方形（体）的视景体，之外的物体不被绘制。所有实际大小的物体在屏幕上都具有相同的大小，无论远近     
2. 透视投影：其视景体为平截头体，靠近视景体前面的物体看上去比较接近原始大小，而靠近视景体后部的物体被投影到视景体前部时，看上去比较小    






















